namespace = giga_birch

country_event = {
	id = giga_birch.001
	hide_window = yes
	fire_only_once = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_birch
	}

	immediate = {	
		if = { 
			limit = { NOT = {has_global_flag = birch_black_hole_occured } }
			set_global_flag = birch_black_hole_occured
			set_country_flag = found_giga_black_hole

			# Tag our old home planet
			capital_scope = {
				save_event_target_as = previous_home_planet
				solar_system = { save_event_target_as = previous_home_system }
				if = {
					limit = { exists = sector }
					sector.sector_capital = {
						leader = {
							unassign_leader = this
							save_event_target_as = birch_gov
						}
					}
				}
				else = {
					root = {
						random_owned_leader = {
							limit = { leader_class = governor }
							save_event_target_as = birch_gov
						}
					}
				}
			}

			# Spawn the Birch World System
			no_scope = {
				set_spawn_system_batch = begin
				spawn_system = { min_distance >= 0.0001  max_distance <= 0.0001	min_orientation_angle = 44  max_orientation_angle = 46  initializer = giga_black_hole_core_origin_initializer	hyperlane = no }
				last_created_system = { set_name = event_target:previous_home_system }
				spawn_system = { min_distance >= 15	max_distance <= 15	min_orientation_angle = 90	max_orientation_angle = 90	initializer = "giga_inner_1_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 15	max_distance <= 15	min_orientation_angle = 150	max_orientation_angle = 150	initializer = "giga_inner_2_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 15	max_distance <= 15	min_orientation_angle = 210	max_orientation_angle = 210	initializer = "giga_inner_3_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 15	max_distance <= 15	min_orientation_angle = 270	max_orientation_angle = 270	initializer = "giga_inner_4_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 15	max_distance <= 15	min_orientation_angle = 330	max_orientation_angle = 330	initializer = "giga_inner_5_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 15	max_distance <= 15	min_orientation_angle = 30	max_orientation_angle = 30	initializer = "giga_inner_6_initializer"	hyperlane = no }

				spawn_system = { min_distance >= 27.5	max_distance <= 27.5	min_orientation_angle = 90	max_orientation_angle = 90	initializer = "giga_mid_1_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 27.5	max_distance <= 27.5	min_orientation_angle = 210	max_orientation_angle = 210	initializer = "giga_mid_3_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 27.5	max_distance <= 27.5	min_orientation_angle = 330	max_orientation_angle = 330	initializer = "giga_mid_5_initializer"	hyperlane = no }

				spawn_system = { min_distance >= 27.5	max_distance <= 27.5	min_orientation_angle = 150	max_orientation_angle = 150	initializer = "giga_mid_2_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 27.5	max_distance <= 27.5	min_orientation_angle = 270	max_orientation_angle = 270	initializer = "giga_mid_4_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 27.5	max_distance <= 27.5	min_orientation_angle = 30	max_orientation_angle = 30	initializer = "giga_mid_6_initializer"	hyperlane = no }

				spawn_system = { min_distance >= 55	max_distance <= 55	min_orientation_angle = 90	max_orientation_angle = 90	initializer = "giga_outer_1_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 55	max_distance <= 55	min_orientation_angle = 210	max_orientation_angle = 210	initializer = "giga_outer_2_initializer"	hyperlane = no }
				spawn_system = { min_distance >= 55	max_distance <= 55	min_orientation_angle = 330	max_orientation_angle = 330	initializer = "giga_outer_3_initializer"	hyperlane = no }
				#Inner hexagon lanes
				add_hyperlane_safe = { from = event_target:giga_core_system	to = event_target:giga_inner_1 }
				add_hyperlane_safe = { from = event_target:giga_core_system	to = event_target:giga_inner_2 }
				add_hyperlane_safe = { from = event_target:giga_core_system	to = event_target:giga_inner_3 }
				add_hyperlane_safe = { from = event_target:giga_core_system	to = event_target:giga_inner_4 }
				add_hyperlane_safe = { from = event_target:giga_core_system	to = event_target:giga_inner_5 }
				add_hyperlane_safe = { from = event_target:giga_core_system	to = event_target:giga_inner_6 }

				add_hyperlane_safe = { from = event_target:giga_inner_1		to = event_target:giga_inner_2 }
				add_hyperlane_safe = { from = event_target:giga_inner_2		to = event_target:giga_inner_3 }
				add_hyperlane_safe = { from = event_target:giga_inner_3		to = event_target:giga_inner_4 }
				add_hyperlane_safe = { from = event_target:giga_inner_4		to = event_target:giga_inner_5 }
				add_hyperlane_safe = { from = event_target:giga_inner_5		to = event_target:giga_inner_6 }
				add_hyperlane_safe = { from = event_target:giga_inner_6		to = event_target:giga_inner_1 }

				add_hyperlane_safe = { from = event_target:giga_inner_1		to = event_target:giga_mid_1 }
				add_hyperlane_safe = { from = event_target:giga_inner_2		to = event_target:giga_mid_2 }
				add_hyperlane_safe = { from = event_target:giga_inner_3		to = event_target:giga_mid_3 }
				add_hyperlane_safe = { from = event_target:giga_inner_4		to = event_target:giga_mid_4 }
				add_hyperlane_safe = { from = event_target:giga_inner_5		to = event_target:giga_mid_5 }
				add_hyperlane_safe = { from = event_target:giga_inner_6		to = event_target:giga_mid_6 }

				#Mid hexagon lanes
				add_hyperlane_safe = { from = event_target:giga_mid_1		to = event_target:giga_mid_2 }
				add_hyperlane_safe = { from = event_target:giga_mid_2		to = event_target:giga_mid_3 }
				add_hyperlane_safe = { from = event_target:giga_mid_3		to = event_target:giga_mid_4 }
				add_hyperlane_safe = { from = event_target:giga_mid_4		to = event_target:giga_mid_5 }
				add_hyperlane_safe = { from = event_target:giga_mid_5		to = event_target:giga_mid_6 }
				add_hyperlane_safe = { from = event_target:giga_mid_6		to = event_target:giga_mid_1 }

				#Outer systems connect to allow going around the hexagon
				add_hyperlane_safe = { from = event_target:giga_mid_1		to = event_target:giga_outer_1 }
				add_hyperlane_safe = { from = event_target:giga_mid_3		to = event_target:giga_outer_2 }
				add_hyperlane_safe = { from = event_target:giga_mid_5		to = event_target:giga_outer_3 }

				add_hyperlane_safe = { from = event_target:giga_outer_1		to = event_target:giga_mid_2 }
				add_hyperlane_safe = { from = event_target:giga_outer_2		to = event_target:giga_mid_2 }
				add_hyperlane_safe = { from = event_target:giga_outer_2		to = event_target:giga_mid_4 }
				add_hyperlane_safe = { from = event_target:giga_outer_3		to = event_target:giga_mid_4 }
				add_hyperlane_safe = { from = event_target:giga_outer_3		to = event_target:giga_mid_6 }
				add_hyperlane_safe = { from = event_target:giga_outer_1		to = event_target:giga_mid_6 }
				set_spawn_system_batch = end

				# spawn guard critters
				create_country = {
					name = giga_birch_origin_critters
					type = faction

					flag = {
						icon = {
							category = spherical
							file = flag_spherical_7.dds
						}
						background= {
							category = backgrounds
							file = circle.dds
						}
						colors={
							"black"
							"dark_grey"
							"null"
							"null"
						}
					}
				}
				last_created_country = {
					add_modifier = {
						modifier = giga_birch_origin_critter_balance
					}

					create_fleet = {
						name = giga_birch_origin_critters_fleet
						settings = { spawn_debris = no }
						effect = {
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							set_fleet_stance = aggressive
							set_owner = prev
							set_location = event_target:giga_outer_1.star
						}
					}

					create_fleet = {
						name = giga_birch_origin_critters_fleet
						settings = { spawn_debris = no }
						effect = {
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							set_fleet_stance = aggressive
							set_owner = prev
							set_location = event_target:giga_outer_2.star
						}
					}

					create_fleet = {
						name = giga_birch_origin_critters_fleet
						settings = { spawn_debris = no }
						effect = {
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							create_ship = { design = NAME_Surplus_Gamma name = giga_birch_origin_critters_ship graphical_culture = fallen_empire_03 }
							set_fleet_stance = aggressive
							set_owner = prev
							set_location = event_target:giga_outer_3.star
						}
					}
				}
			}

			event_target:giga_core_system = {
				set_star_flag = empire_cluster
				set_star_flag = empire_home_system

				star = {
					giga_set_has_mega_flag = yes
					change_planet_size = -14
					remove_deposit = yes
					random_list = {
						1 = { set_name = "Corey's Gut" }
						1 = { set_name = "Time's Agony" }
						1 = { set_name = "Undying Fury" }
						1 = { set_name = "Eternal Horizon" }
						1 = { set_name = "Sagittrevorius A" }
						1 = { set_name = "Pouchkinn's Vortex" }
						1 = { set_name = "The End" }
						1 = { set_name = "Voluptia" }
						1 = { set_name = "Powehi" }
						1 = { set_name = "Centaurus A" }
						1 = { set_name = "Cygnus X-1" }
						1 = { set_name = "Sagittarius A*" }
						1 = { set_name = "TON 618" }
						1 = { set_name = "Steve" }
						1 = { set_name = "Steeve" }
						1 = { set_name = "Sbeve" }
						1 = { set_name = "Twissell" }
						1 = { set_name = "Anulus" }
						1 = { set_name = "Aria" }
						1 = { set_name = "Nero" }
						1 = { set_name = "Temporal Itch" }
						1 = { set_name = "Stellar Beholder" }
						1 = { set_name = "Grim Reaper" }
						1 = { set_name = "dQw4w9WgXcQ" }
						1 = { set_name = "Shatterer of Behemoths" }
						1 = { set_name = "Grand Gargantua" }
						1 = { set_name = "111001" }
						1 = { set_name = "Great Mother" }
						1 = { set_name = "Placeholder black hole, real one is being renovated, apologies for the inconvenience" }
						1 = { set_name = "Despacito" }
						1 = { set_name = "siggatarius A*" }
					}
				}

				while = { count = 10 giga_field_system_debris = yes }
				create_ambient_object = {
					type = "alderson_frame"
					location = star
					use_3d_location = yes
					base_angle_towards = star
					entity_face_object = star
				}
				last_created_ambient_object = { set_ambient_object_flag = alderson_frame }

				spawn_megastructure = {
					name = "Ruined Hypersegment H"
					type = "alderson_disk_ruined_left"
					orbit_angle = 0
					orbit_distance = 178.75
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_left
						giga_field_debris = yes
					}
				}

				spawn_megastructure = {
					name = "Ruined Hypersegment B"
					type = "alderson_disk_ruined_right"
					orbit_angle = 90
					orbit_distance = 178.75
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_right
						giga_field_debris = yes
					}
				}

				spawn_megastructure = {
					name = "Ruined Hypersegment C"
					type = "alderson_disk_ruined_center"
					orbit_angle = 135
					orbit_distance = 180
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_center
						giga_field_debris = yes
					}
				}

				spawn_megastructure = {
					name = "Ruined Hypersegment D"
					type = "alderson_disk_ruined_left"
					orbit_angle = 180
					orbit_distance = 178.75
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_left
						giga_field_debris = yes
					}
				}

				spawn_megastructure = {
					name = "Ruined Hypersegment G"
					type = "alderson_disk_ruined_right"
					orbit_angle = 315
					orbit_distance = 180
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_right
						giga_field_debris = yes
					}
				}

				spawn_planet = {
					class = "pc_alderson_slice_gaia"
					location = solar_system
					orbit_angle_offset = 135
					orbit_distance_offset = 180
					size = 15
					init_effect = {
						set_name = "Hypersegment E"
						prevent_anomaly = yes
						set_planet_flag = forbid_guillis_planet_modifiers
						set_planet_flag = gpm_has_planet_rings
						set_planet_flag = excognitor_planet
						set_planet_flag = giga_alderson_gaia
						generate_alderson_01_primitives_on_planet = yes
					}
				}

				spawn_planet = {
					class = "pc_alderson_slice_gaia"
					location = solar_system
					orbit_angle_offset = 180
					orbit_distance_offset = 178.75
					size = 15
					init_effect = {
						set_name = "Hypersegment F"
						prevent_anomaly = yes
						set_planet_flag = forbid_guillis_planet_modifiers
						set_planet_flag = gpm_has_planet_rings
						set_planet_flag = dominion_planet
						set_planet_flag = giga_alderson_gaia
						generate_alderson_02_primitives_on_planet = yes
					}
				}

				spawn_planet = {
					class = pc_alderson_slice_gaia
					location = solar_system
					orbit_angle_offset = 315
					orbit_distance_offset = 180
					size = 15
					home_planet = yes
					init_effect = {
						save_event_target_as = birch_world
						set_name = "Hypersegment A"
						prevent_anomaly = yes
						set_planet_flag = forbid_guillis_planet_modifiers
						set_planet_flag = gpm_has_planet_rings
						set_planet_flag = giga_alderson_gaia
					}
				}

				# Add a starbase
				create_starbase = {
					size = "starbase_starport"
					module = "shipyard"
					building = "crew_quarters"
					owner = root
					effect = { save_event_target_as = birch_starbase }
				}
			}

			# Birch setup
			event_target:birch_world = {
				# own the birch world first
				set_owner = root
				set_controller = root

				# set up buildings etc
				#generate_start_buildings_and_districts = yes
				#generate_start_pops = yes

				# clear it out down to a single pop of the primary species
				# remove_all_districts = yes
				every_owned_pop = {
					limit = { not = { is_same_species = root.species } }
					kill_pop = yes
				}
				while = {
					limit = {
						num_pops > 1
					}
					random_owned_pop = {
						kill_pop = yes
					}
				}

				set_planet_flag = forbid_guillis_planet_modifiers
				set_planet_flag = gpm_has_planet_rings
				set_planet_flag = hot_zone				# Real Space (Prevents Rings)
				set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
				set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
				set_planet_flag = colony_event			# Vanilla uses to prevent unwanted events on planets
				set_planet_flag = giga_alderson_gaia

				trigger_megastructure_icon = yes
				clear_planet_modifiers = yes
				clear_deposits = yes
				clear_blockers = yes
				remove_all_districts = yes
				remove_all_buildings = yes
				add_deposit = d_alderson_generator
				add_deposit = d_alderson_ruined_district
				add_deposit = d_alderson_lost01
				add_deposit = d_alderson_ruined_housing

				if = {
					limit = { root = { is_machine_empire = yes } }
					root = {
						random_owned_pop = {
							limit = { is_robot_pop = yes }
							save_event_target_as = species_to_make_pops_of
						}
					}
				}
				else = {
					root = {
						random_owned_pop = {
							limit = { is_robot_pop = no }
							save_event_target_as = species_to_make_pops_of
						}
					}
				}
				while = {
					count = 5
					create_pop = { species = event_target:species_to_make_pops_of }
				}

				if = {
					limit = { root = { is_regular_empire = yes } }
					add_district = district_giga_alderson_city
					add_district = district_giga_alderson_mining
					add_district = district_giga_alderson_farming
					add_district = district_giga_alderson_industrial
					add_district = district_giga_alderson_commercial
					add_deposit = d_alderson_ruined_miner
					add_deposit = d_alderson_ruined_farmer
					add_deposit = d_alderson_ruined_merchant
					if = {
						limit = {
							exists = owner
							owner = { is_crafter_empire = yes }
						}
						add_deposit = d_alderson_ruined_crafters
					}
					else = {
						add_deposit = d_alderson_ruined_artisan
					}
					add_deposit = d_alderson_ruined_clerk
					add_deposit = d_alderson_ruined_foundry
					add_deposit = d_alderson_ruined_police

					add_building = building_capital
					add_building = building_bureaucratic_1
					add_building = building_research_lab_1
				}
				else_if = {
					limit = { root = { is_machine_empire = yes } }
					add_district = district_giga_alderson_nexus
					add_district = district_giga_alderson_mining
					add_district = district_giga_alderson_generator
					add_district = district_giga_alderson_industrial

					if = {
						limit = {
							owner = {
								OR = {
									has_civic = civic_machine_servitor
									has_civic = civic_machine_assimilator
								}
							}
						}
						add_district = district_giga_alderson_farming
						add_deposit = d_alderson_ruined_agri_drone

						# Servitors
						if = {
							limit = { owner = { has_civic = civic_machine_servitor } }
							add_building = building_organic_sanctuary
						}
					}

					add_building = building_machine_capital
					add_building = building_machine_assembly_plant
					add_building = building_uplink_node
					add_building = building_research_lab_1

					add_deposit = d_alderson_ruined_mining_drone
					add_deposit = d_alderson_ruined_technician_machine
					add_deposit = d_alderson_ruined_maintenance_drone
					add_deposit = d_alderson_ruined_foundry_machine
					add_deposit = d_alderson_ruined_patrol_drone
				}
				else_if = {
					limit = { root = { is_hive_empire = yes } }
					add_district = district_giga_alderson_hive
					add_district = district_giga_alderson_mining
					add_district = district_giga_alderson_farming
					add_district = district_giga_alderson_generator
					add_district = district_giga_alderson_industrial

					add_building = building_hive_capital
					add_building = building_hive_node
					add_building = building_research_lab_1
					add_building = building_spawning_pool
					add_building = building_hive_warren

					add_deposit = d_alderson_ruined_mining_drone_hive
					add_deposit = d_alderson_ruined_agri_drone_hive
					add_deposit = d_alderson_ruined_technician_hive
					add_deposit = d_alderson_ruined_maintenance_drone_hive
					add_deposit = d_alderson_ruined_foundry_hive
					add_deposit = d_alderson_ruined_patrol_drone
				}

				every_owned_pop = {
					unemploy_pop = yes
					clear_pop_category = yes
				}
				check_planet_employment = yes
				
				# now continue with setup
				set_capital = yes
				set_sector_capital = yes
				sector.sector_capital = { assign_leader = event_target:birch_gov }

				generate_home_planet_final_pass = yes
			}

		# Move player ships
		every_owned_fleet = {
			limit = {
				is_mobile = yes
			}
			set_location = event_target:birch_starbase
			if = {
				limit = { 
					is_civilian = no
				}
				set_home_base = event_target:birch_starbase
			}
			# queue_actions = {
			# 	orbit_planet = event_target:giga_core_system.star
			# }
		}

			# Remove the old home planet
			event_target:previous_home_planet = {
				every_owned_pop = {
					unemploy_pop = yes
					resettle_pop = { pop = this planet = event_target:birch_world }
				}

				set_planet_size = 17
				change_pc = pc_nuked
				destroy_colony = yes
				reroll_planet = yes
				set_name = giga_birch_dummy_system_planet_2
			}

			event_target:birch_world = {
				every_owned_pop = {
					unemploy_pop = yes
					clear_pop_category = yes
				}
				# since it doesn't like to move many pops at the same time sometimes...
				while = {
					count = 40
					check_planet_employment = yes
				}
			}

			# unclaim the old home system
			event_target:previous_home_system = {
				every_fleet_in_system = { delete_fleet = this }
				remove_star_flag = empire_home_system
				remove_star_flag = empire_cluster
				every_neighbor_system = {
					remove_star_flag = empire_cluster
					every_neighbor_system = { remove_star_flag = empire_cluster }
				}
				set_name = giga_birch_dummy_system
				set_surveyed = {
					surveyed = no
					surveyor = root
				}
			}

			# Set species homeworld
			#owner_species = { set_species_homeworld = event_target:birch_world }
			every_owned_pop_species = { 
				set_species_homeworld = event_target:birch_world
				if = {
					limit = {
						has_trait = trait_pc_continental_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_continental_preference
						add_traits_at_start_of_list = yes
						add_trait = trait_pc_birch_preference
					}
				}
			}

			# link the core to outside
			set_spawn_system_batch = begin
			event_target:giga_outer_1 = {
				random_list = {
					1 = { while = { count = 1 giga_generate_hyperlane = yes } }
					1 = { while = { count = 2 giga_generate_hyperlane = yes } }
				}
			}
			event_target:giga_outer_2 = {
				random_list = {
					1 = { while = { count = 1 giga_generate_hyperlane = yes } }
					1 = { while = { count = 2 giga_generate_hyperlane = yes } }
				}
			}
			event_target:giga_outer_3 = {
				random_list = {
					1 = { while = { count = 1 giga_generate_hyperlane = yes } }
					1 = { while = { count = 2 giga_generate_hyperlane = yes } }
				}
			}
			set_spawn_system_batch = end
			every_country = {
				limit = { has_origin = origin_birch NOT = { has_country_flag = found_giga_black_hole} }
				capital_scope.solar_system = { set_star_flag = gigas_new_planets set_star_flag = birch_reset }
				giga_reset_ai_start = yes
			}
		}
	}
}

# Perform linking
country_event = {
	id = giga_birch.003
	title = "giga_birch.003.name"
	desc = { trigger = { has_country_flag = birch_completed_hyperlane_project }			text = "giga_birch.003.desc" }
	desc = { trigger = { NOT = { has_country_flag = birch_completed_hyperlane_project } }	text = "giga_birch.003.desc2" }
	picture = GFX_evt_black_hole
	show_sound = event_sensor_ping
	is_triggered_only = yes
	fire_only_once = yes
	option = { name = OK }

	immediate = {
		set_spawn_system_batch = begin
		event_target:giga_outer_1 = {
			random_list = {
				1 = { while = { count = 1 giga_generate_hyperlane = yes } }
				1 = { while = { count = 2 giga_generate_hyperlane = yes } }
			}
		}
		event_target:giga_outer_2 = {
			random_list = {
				1 = { while = { count = 1 giga_generate_hyperlane = yes } }
				1 = { while = { count = 2 giga_generate_hyperlane = yes } }
			}
		}
		event_target:giga_outer_3 = {
			random_list = {
				1 = { while = { count = 1 giga_generate_hyperlane = yes } }
				1 = { while = { count = 2 giga_generate_hyperlane = yes } }
			}
		}
		set_spawn_system_batch = end
	}
}